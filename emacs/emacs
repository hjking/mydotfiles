
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   ____  __  __  __ _  ___ ___
;;  / __ \/__\/__\/ _` |/ __/ __|
;; | ____/|| || || (_| | (__\__ \
;;  \____ || || ||\__,_|\___|___/
;;
;; File Name:       .emacs
;; Author:          Hong Jin
;; Email:           hon9jin (at) gmail.com
;; Created:         2010-04-22 10:20 (+900)
;; Last Modified:   2011-10-10 14:07:45
;; Description:     Emacs customization file
;; Reference:       Emacs document
;; Keywords:        emacs, dotfile, config
;; Copyright:       (C) 2010, Hong Jin
;; License:         This program is free software: you can redistribute it and/or modify
;;                  it under the terms of the GNU General Public License as published by
;;                  the Free Software Foundation, either version 3 of the License, or
;;                  (at your option) any later version.
;;
;;                  This program is distributed in the hope that it will be useful,
;;                  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;                  GNU General Public License for more details.
;;
;;                  You should have received a copy of the GNU General Public License
;;                  along with this program. If not, see <http://www.gnu.org/licenses/>.
;; Revision History:
;; +------------+------------+----------------------------------------+
;; |  Date      |  Revision  |  Description                           |
;; +------------+------------+----------------------------------------+
;; | 2010-04-22 |  0.9.0     | Initial version                        |
;; | 2010-04-23 |  0.9.1     | Add some key bindings                  |
;; | 2010-04-25 |  0.9.2     | Add some plugins                       |
;; | 2010-04-30 |  1.0.0     | First version                          |
;; | 2010-04-30 |  1.1.0     | Change structure of plugin config      |
;; | 2010-04-30 |  1.1.1     | Little change about structure          |
;; | 2010-05-03 |  1.2.0     | Second version                         |
;; | 2010-05-14 |  1.2.1     | Add clean-up-buffer-or-region function |
;; | 2010-05-17 |  1.2.2     | Add delete-current-file function       |
;; | 2010-05-21 |  1.2.3     | Change spell mode to off               |
;; | 2010-05-31 |  1.2.4     | Add isearch-forward-at-point           |
;; | 2010-06-01 |  1.2.5     | Add ivan-etags-bookmark                |
;; | 2010-10-23 |  1.2.6     | Add auto-header                        |
;; | 2010-10-23 |  1.2.7     | Delete auto-header; Add autoinsert     |
;; | 2010-12-13 |  1.3.0     | Restructure the init file              |
;; +------------+------------+----------------------------------------+
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Let's Rock and Roll
;;
(message "")
(message "***** >>>>> [ Loading Emacs Startup File ] <<<<< *****")

;; uptimes
(setq emacs-load-start-time (current-time))

;; allow quick include/exclude of setup parts
(defvar section-environment t)  ; required
(defvar section-loading-libraries t)  ; required
(defvar section-debugging t)
(defvar section-screen nil) ; no
(defvar section-basic nil)  ; no
(defvar section-minibuffer nil)
(defvar section-help nil) ; no
(defvar section-mark nil)
(defvar section-killing nil)
(defvar section-yanking nil)
(defvar section-rectangles nil)
(defvar section-cua-bindings nil)
(defvar section-registers nil)  ; no
(defvar section-display nil)  ; no
(defvar section-search nil)
(defvar section-vi nil)
(defvar section-artist nil)
(defvar section-keyboard-macros nil)  ; no
(defvar section-files nil)  ; no
(defvar section-ibuffer nil)
(defvar section-windows nil)
(defvar section-frames nil)
(defvar section-international nil) ; no
(defvar section-chinese t)
(defvar section-major-modes nil)  ; no
(defvar section-indentation nil)
(defvar section-text nil) ; no
(defvar section-python nil)
(defvar section-perl nil)
(defvar section-planner nil)
(defvar section-building nil) ; no
(defvar section-maintaining nil)  ; no
(defvar section-abbrevs nil)
(defvar section-dired nil)
(defvar section-calendar-diary nil)
(defvar section-document-view nil)
(defvar section-gnus nil) ; no
(defvar section-eshell nil)
(defvar section-verilog nil)
(defvar section-vlog nil)
(defvar section-emacs-server nil) ; no
(defvar section-printing nil) ; no
(defvar section-sorting nil)  ; no
(defvar section-org nil)
(defvar section-etask nil)
(defvar section-narrowing nil)  ; no
(defvar section-saving-emacs-sessions nil)
(defvar section-hyperlinking nil) ; no
(defvar section-muse nil)
(defvar section-customization nil)  ; no
(defvar section-ms-dos nil) ; no
(defvar section-emacs-display t)  ; no
(defvar section-pcvs nil)
(defvar section-psvn nil)
(defvar section-emms nil)
(defvar section-vm nil)
(defvar section-ac t)
(defvar section-scratch t)
(defvar section-c-mode t)
(defvar section-elisp-mode t)
(defvar section-shell-mode t)
(defvar section-defuns t)
(defvar section-yasnippet nil)

;;;###autoload
(defmacro define-kbd     (keymap key def) `(define-key ,keymap (kbd ,key) ,def))
;;;###autoload
(defmacro local-set-kbd  (key command)    `(local-set-key (kbd ,key) ,command))
;;;###autoload
(defmacro global-set-kbd (key command)    `(global-set-key (kbd ,key) ,command))


;; --[ Load Path ]--------------------------------------------------------------
(when section-loading-libraries (message ">>>>> Loading [ Default Path ] ....")
  (setenv "HOME" "E:/Workspace/Ref/emacs")
  (setenv "PATH" "E:/Workspace/Ref/emacs")
  ;;set the default file path
  (setq default-directory "~/")
  (setq load-path (cons "~/.emacs.d/plugin" load-path))
  (setq load-path (cons "~/.emacs.d/conf" load-path))
  ;; My Emacs home directory
  (setq my-emacs-dir (expand-file-name "~/.emacs.d/"))
  ;; My site-lisp directory
  (setq my-site-lisp-dir (concat my-emacs-dir "plugin/"))
  ;; My configuration files directory
  (setq my-site-lisp-conf-dir (concat my-emacs-dir "conf/"))
  (add-to-list 'load-path my-emacs-dir)
  (add-to-list 'load-path my-site-lisp-dir)
  (add-to-list 'load-path my-site-lisp-conf-dir)

  (message " 0 >>>>> Loading Path ... Done")
)
;; --[ Load Path ]-----------------------------------------------------[ End ]--

;; --[ Environment ]------------------------------------------------------------
(when section-environment
    (load "env-conf")
)

(when linuxp
  (add-to-list 'exec-path "~/bin"))
(when win32p
  (add-to-list 'exec-path "C:/cygwin/bin"))

;; use eval-after-load to speed up the startup
;; http://emacser.com/eval-after-load.htm
(require 'eval-after-load)


;; --[ Personal ]---------------------------------------------------------------
(message ">>>>> Loading [ Personal Profile ] ....")
;;todo_path NEW @ 2010-10-23-22:58
(setq todo-file-do "~/.emacs.d/todo/do")
(setq todo-file-done "~/.emacs.d/todo/done")
(setq todo-file-top "~/.emacs.d/todo/top")

;;Set user name
(setq user-full-name "Hong Jin")
;; Set email address
(setq user-mail-address "hon9jin@gmail.com");
;;(setq sendmail-program "/usr/sbin/sendmail")

;; (let ((personal-settings "~/.emacs.d/conf/personal.el"))
;;   (when (file-exists-p personal-settings)
;;     (load personal-settings)))
;; --[ Personal ]------------------------------------------------------[ End ]--

(when (>= 21 emacs-major-version)
  (defalias 'move-beginning-of-line 'beginning-of-line)
  (defalias 'move-end-of-line       'end-of-line))


;; --[ Function ]---------------------------------------------------------------
(when section-defuns
    (load "defuns"))
;; --------------------------------------------------------------------[ End ]--


;; --[ Basic ]------------------------------------------------------------------
(message ">>>>> Loading [ Basic Customization ] ....")
;; custom file: modified setting by menu bar
(setq custom-file "~/.emacs.d/my-custom.el")

;;; === load file ===
(load custom-file 'noerror)

(load "global")

;; turn on Common Lisp support
(require 'cl)  ; provides useful things like `loop' and `setf'

;; Load face+ after loading face
(eval-after-load "faces" '(require 'faces+))

(when section-scratch
    (load "scratch-conf"))


(message ">>>>> Loading [ Misc ] Customizations ....")

;; make the help, apropos and completion windows the right height for their contents
(temp-buffer-resize-mode t)

;; enable the use of the command `narrow-to-region' without confirmation
(put 'narrow-to-region 'disable nil)

;; enable the use of the commands `downcase-region' and `upcase-region'
;; without confirmation
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'set-goal-column 'disable nil)

;; highlight current line
(require 'hl-line)
;;(hl-line-mode 1)
(global-hl-line-mode 1)

;; Not open new frame when WoMan
(setq woman-use-own-frame nil)
(setq woman-fill-column 90)
(when win32p
  (setq woman-manpath '("c:/cygwin/usr/man"
          "c:/cygwin/usr/share/man"
          "c:/cygwin/usr/local/man")))

;; display images
;;  (require 'image-mode)
(auto-image-file-mode 1)
;;  (define-key image-mode-map (kbd "'")  'switch-to-other-buffer)

;; handle compressed file
(require 'jka-compr)
(auto-compression-mode 1)

;; display function the cursor is in
(which-function-mode 1)
(setq which-func-unknown "unknown")

(message ">>>>> Loading [ Misc ] Customizations Done")

;; NEW @  2010-10-23-23:08
(add-hook 'message-mode-hook (lambda ()
    (setq fill-column 80)
    (turn-on-auto-fill)))

(autoload 'mode-compile "mode-compile"
  "Command to compile current buffer file based on the major mode" t)

;;use proxy server
;;(setq url-proxy-services '(("http" . "proxy.km.local:8080")))
;; --[ Basic ]---------------------------------------------------------[ End ]--


;; --[ Color Theme ]------------------------------------------------------------
(message ">>>>> Loading [ Color Theme ] Customizations ....")
;; color
(setq color-theme-path (concat my-site-lisp-dir "color_th/"))
(add-to-list 'load-path color-theme-path)
(require 'color-theme)
(require 'gentooish)
(require 'hjking-color)
(ignore-errors (color-theme-initialize))
(setq color-theme-is-global t)
;;(color-theme-gentooish)
(color-theme-beauty-black)
;;(inspiration-630157)
;;(color-theme-arjen)
;;(color-theme-charcoal-black)
;;(color-theme-dark-blue2)
;;(color-theme-dark-laptop)
;;(color-theme-jsc-dark)
;;(color-theme-ld-dark)
;;(color-theme-ramangalahy)
;;(color-theme-vim-colors)
;;(color-theme-jedit-grey)
(message ">>>>> Loading [ Color Theme ] Customizations Done")
;; --[ Color Theme ]---------------------------------------------------[ End ]--


;; --[ Minibuffer ]-------------------------------------------------------------
(when section-minibuffer
  (message ">>>>> Loading [ Minibuffer Customization ] ....")
  (setq read-file-name-completion-ignore-case t)
  ;; If non-`nil', resize the minibuffer so its entire contents are visible.
  (setq resize-minibuffer-mode t)
  ;; Enable recursive minibuffer
  (setq enable-recursive-minibuffers t)
  ;; auto-complete on in minibuffer
  (unless is-after-emacs-23
      partial-completion-mode 1)
  ;; auto-complete when execute M-x functions and variables
  (icomplete-mode 1)
  ;; do not consider case significant in completion (GNU Emacs default)
  (setq completion-ignore-case t)
  ;; type SPACE to auto-complete in minibuffer
  (define-key minibuffer-local-completion-map (kbd "SPC") 'minibuffer-complete-word)
  ;; auto-complete
  (minibuffer-electric-default-mode t)

  (defun completion-faces ()
    (unless is-before-emacs-21
      (custom-set-faces
       '(completions-first-difference
         ((((class color) (background dark)) (:foreground "red")))))
      (set-face-foreground 'completions-common-part "yellow")))
  (am-add-hooks 'completion-setup-hook 'completion-faces)

)
;; --[ Minibuffer ]----------------------------------------------------[ End ]--


;; --[ Help ]-------------------------------------------------------------------
(message ">>>>> Loading [ Help Customization ] ....")
;; check all variables and non-interactive functions as well
(setq apropos-do-all t)
;; list of directories to search for Info documentation files
;;  (append Info-default-directory-lis
;;        cond (t '("~/.emacs.d/info"
;;                  ".")))
;; add apropos help about variables (bind `C-h A' to `apropos-variable')
(GNUEmacs (define-key help-map (kbd "A") 'apropos-variable))
;; --[ Help ]----------------------------------------------------------[ End ]--


;; --[ mark and region ]--------------------------------------------------------
(when section-mark
    (message ">>>>> Loading [ Mark and Region Customization ] ....")
    ;; highlight marked region
    (transient-mark-mode t)
)
;; --[ mark and region ]-----------------------------------------------[ End ]--


;; --[ killing ]----------------------------------------------------------------
(when section-killing
    (message ">>>>> Loading [ Killing Customization ] ....")
    ;; use a bigger kill ring
    (setq kill-ring-max 200)
    ;; C-k delete a whole line
    (setq-default kill-whole-line t)
    ;; when press copy or cut when no region is active, copy or cut the current line
    ;; <http://www.zafar.se/bkz/Articles/EmacsTips>
    (defadvice kill-ring-save (before slickcopy activate compile)
      "When called interactively with no active region, copy the current line instead."
      (interactive
      (if mark-active
        (list (region-beginning) (region-end))
        (progn
          (message "Current line is copied")
          (list (line-beginning-position) (line-end-position))))))

    (defadvice kill-region (before slickcut activate compile)
      "When called interactively with no active region, cut the current line instead."
      (interactive
      (if mark-active
        (list (region-beginning) (region-end))
        (progn
            (message "Current line is cut.")
            (list (line-beginning-position) (line-end-position))))))
)
;; --[ killing ]-------------------------------------------------------[ End ]--


;; --[ yanking ]----------------------------------------------------------------
(when section-yanking
    (message ">>>>> Loading [ Yanking Customization ] ....")
    ;; use clipboard, share with other applications
    (setq x-select-enable-clipboard t)
    ;; middle button for paste
    (setq mouse-yank-at-point t)
    ;; auto-indent pasted code
    (defadvice yank (after indent-region activate)
      (if (member major-mode
                  '(emacs-lisp-mode scheme-mode lisp-mode c-mode c++-mode
                    objc-mode latex-mode plain-tex-mode python-mode))
          (indent-region (region-beginning) (region-end) nil)))

    (defadvice yank-pop (after indent-region activate)
      (if (member major-mode
                  '(emacs-lisp-mode scheme-mode lisp-mode c-mode c++-mode
                    objc-mode latex-mode plain-tex-mode python-mode))
          (indent-region (region-beginning) (region-end) nil)))
)
;; --[ yanking ]-------------------------------------------------------[ End ]--


;; --[ CUA Mode]----------------------------------------------------------------
(when section-cua-bindings
  (when is-after-emacs-22
      (load "cua-conf")))
;; --------------------------------------------------------------------[ End ]--


;; --[ Bookmark ]---------------------------------------------------------------
(message ">>>>> Loading [ Bookmark Customization ] ....")
;; set bookmark dir
(setq bookmark-default-file "~/.emacs.d/.emacs_bookmarks")
;; each command that sets a bookmark will also save your bookmarks
(setq bookmark-save-flag t)
;; put etags information in bookmark
(defun ivan-etags-bookmark ()
  (bookmark-set tagname))
;; --[ Bookmark ]------------------------------------------------------[ End ]--


;; --[ Scrolling ]--------------------------------------------------------------
(message ">>>>> Loading [ Scrolling Customization ] ....")
;; no scroll bar
(scroll-bar-mode t)
;;  (setq scroll-bar-mode-explicit t)
;; scroll bar at right hand
(set-scroll-bar-mode `right)
;; scroll when point 3 lines far away from the bottom
(setq scroll-step 1 scroll-margin 3 scroll-conservatively 10000)
(setq hscroll-step 1)
;; don't add new lines when scrolling point
(setq next-line-add-newlines nil)
;; <pager> provides a better scrolling in Emacs
;; --[ Scrolling ]-----------------------------------------------------[ End ]--


;; --[ Rectangles ]-------------------------------------------------------------
(when section-rectangles
    (message ">>>>> Loading [ Rectangles Customization ] ....")
;; `kill-rectangle' (C-x r k) and `yank-rectangle' (C-x r y) can be very
;; useful for shifting cells up/down within a column while leaving remaining
;; columns intact.
)
;; --[ Rectangles ]----------------------------------------------------[ End ]--


;; --[ search and replace ]-----------------------------------------------------
(when section-search
    (load "search-conf")
)
;; --[ Search and Replace ]--------------------------------------------[ End ]--


;; --[ Font Lock ]--------------------------------------------------------------
(message ">>>>> Loading [ Font Lock Customization ] ....")
;; highlight syntax
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
;;(setq font-lock-global-modes '(not text-mode))
;;(setq font-lock-verbose t)
;;(setq font-lock-maximum-size '((t . 1048576) (vm-mode . 5250000)))
;; Get more highlight
(require 'generic-x)
;; --[ Font Lock ]-----------------------------------------------------[ End ]--


;; --[ FontLock Keywords]-------------------------------------------------------
;; special words
(setq keywords-critical-pattern
      "\\(BUGS\\|FIXME\\|TODO\\|todo\\|XXX\\|[Ee][Rr][Rr][Oo][Rr]\\|[Mm][Ii][Ss][Ss][Ii][Nn][Gg]\\|[Ii][Nn][Vv][Aa][Ll][Ii][Dd]\\|[Ff][Aa][Ii][Ll][Ee][Dd]\\|[Cc][Oo][Rr][Rr][Uu][Pp][Tt][Ee][Dd]\\)")
(make-face 'keywords-critical)
(GNUEmacs (set-face-attribute 'keywords-critical nil
                              :foreground "red" :background "yellow"
                              :weight 'bold))

(setq keywords-normal-pattern "\\([Ww][Aa][Rr][Nn][Ii][Nn][Gg]\\)")
(make-face 'keywords-normal)
(GNUEmacs (set-face-attribute 'keywords-normal nil
                              :foreground "magenta2" :background "yellow"))

;; set up highlighting of special words for proper selected major modes only
(dolist (mode '(fundamental-mode
                svn-log-view-mode
                text-mode))  ; no interference with Org-mode (which derives from text-mode)
  (font-lock-add-keywords mode
    `((,keywords-critical-pattern 1 'keywords-critical prepend)
      (,keywords-normal-pattern 1 'keywords-normal prepend))))

;; add fontification patterns (even in comments) to a selected major mode
;; *and* all major modes derived from it
(defun fontify-keywords ()
  (interactive)
;;;   (font-lock-mode -1)
;;;   (font-lock-mode 1)
  (font-lock-add-keywords nil
    `((,keywords-critical-pattern 1 'keywords-critical prepend)
      (,keywords-normal-pattern 1 'keywords-normal prepend))))
;; FIXME                        0                  t

;; set up highlighting of special words for selected major modes *and* all
;; major modes derived from them
(dolist (hook '(c++-mode-hook
                c-mode-hook
                change-log-mode-hook
                cperl-mode-hook
                css-mode-hook
                emacs-lisp-mode-hook
                html-mode-hook
                java-mode-hook
                latex-mode-hook
                lisp-mode-hook
                makefile-mode-hook
                message-mode-hook
                php-mode-hook
                python-mode-hook
                sh-mode-hook
                shell-mode-hook
                verilog-mode-hook
                ssh-config-mode-hook))
  (add-hook hook 'fontify-keywords))
;; --[ FontLock Keywords]----------------------------------------------[ End ]--


;; --[ Mode Line ]--------------------------------------------------------------
(load "mode-line")
;; --[ Mode Line ]-----------------------------------------------------[ End ]--


;; --[ Cursor and Point ]-------------------------------------------------------
(message ">>>>> Loading [ Cursor and Point Customization ] ....")
;; move cursor when point is coming
(mouse-avoidance-mode 'animate)
;; keep point at the end of the line
(setq track-eol t)
;; use mouse wheel
(mouse-wheel-mode t)
;; default setting
;;(global-set-key (kbd "<mouse-1>") 'mouse-set-point)
;;(global-set-key (kbd "<down-mouse-1>") 'mouse-drag-region)
;;(global-set-key (kbd "<mouse-2>") 'mouse-yank-at-click)
;;(global-set-key (kbd "<C-down-mouse-1>") 'mouse-buffer-menu)
;;(global-set-key (kbd "<mouse-3>") 'mouse-save-then-kill)
;;(global-set-key (kbd "<S-down-mouse-1>") 'mouse-set-font)
;;(global-set-key (kbd "<C-down-mouse-2>") 'mouse-popup-menuar-stuff)
;; fast copy and paste
(require 'mouse-copy)
(global-set-key [M-down-mouse-1] 'mouse-drag-secondary-pasting)
(global-set-key [M-S-down-mouse-1] 'mouse-drag-secondary-moving)

;; using cursor color to indicate some modes (read-only, insert and overwrite modes)
(setq my-set-cursor-color-color "")
(setq my-set-cursor-color-buffer "")

(defun my-set-cursor-color-according-to-mode ()
  "Change cursor color according to some minor modes."
  (let ((color
         (if buffer-read-only "purple1"
           (if overwrite-mode "red"
             "rgb:15/FF/00"))))  ;; insert mode
    (unless (and (string= color my-set-cursor-color-color)
                 (string= (buffer-name) my-set-cursor-color-buffer))
      (set-cursor-color (setq my-set-cursor-color-color color))
      (setq my-set-cursor-color-buffer (buffer-name)))))
(add-hook 'post-command-hook 'my-set-cursor-color-according-to-mode)

;; --[ Cursor and Point ]----------------------------------------------[ End ]--


;; --[ Spell Correction ]-------------------------------------------------------
;;  (load "spelling-check-conf")
;; --[ Spell Correction ]----------------------------------------------[ End ]--


;; --[ Emacs Init File ]--------------------------------------------------------
;;  reload-dotemacs
;;  my-open-dot-emacs
;;  my-autocompile-dotemacs
;; --[ Emacs Init File ]-----------------------------------------------[ End ]--


;; --[ Saving File ]------------------------------------------------------------
(message ">>>>> Loading [ Saving File Customization ] ....")
;; make file executable when saving
;; (add-hook 'after-save-hook
;;           'executable-make-buffer-file-executable-if-script-p)
;; offer save of `*scratch*' buffer on exit
;;  (save-excursion
;;    (set-buffer "*scratch*")
;;    (setq buffer-file-name "~/emacs_scratch"))

;; add a new line at the end of file when saving
(setq require-final-newline nil)
;; --[ Saving File ]---------------------------------------------------[ End ]--


;; --[ Time Stamp ]-------------------------------------------------------------
(message ">>>>> Loading [ Time Stamp Customization ] ....")
;; time-stamp on
(setq time-stamp-active t)
;; if "Last Change: " in file, then save time stamp
(setq time-stamp-start " Last Changed:  ")
;; time-stamp warning off
(setq time-stamp-warn-inactive t)
;; time-stamp end
(setq time-stamp-end "\n")
;; time-stamp format
(setq time-stamp-format "%04y-%02m-%02d %3a %02H:%02M:%02S")
;; when save file, save time-stamp
(add-hook 'write-file-hooks 'time-stamp)
;; --[ Time Stamp ]----------------------------------------------------[ End ]--


;; --[ Auto Save ]--------------------------------------------------------------
(message ">>>>> Loading [ Backup Customization ] ....")
;; auto save interval:every 100 input event
(setq auto-save-interval 100)
;; auto save after 20 senconds idle time
(setq auto-save-timeout 20)
;; default backup folder:~/.emacs.d/auto-save-list/
;; set backup file path
(setq backup-directory-alist '(("." . "~/.emacs.d/tmp/")))
;; version control on
(setq version-control t)
;; backup older versions twice:before 1st edit and 2nd edit
(setq kept-old-versions 2)
;; backup latest version 5 times
(setq kept-new-versions 5)
;; delete old versions except above 7 version
(setq delete-old-versions t)
;; backup method: copy directly
(setq backup-by-copying t)
;; no backup file
(setq make-backup-files nil
      backup-inhibited t)

;; make the message "FILE has auto saved data" unmissable
(defface recover-this-file
  '((t :background "orange"))
  "Face for buffers visiting files with auto saved data."
  :group 'files)
(defvar recover-this-file nil
  "If non-nil, an overlay indicating that the visited file has auto save data.")

(defun recover-this-file-find-file-hook ()
  ;; see after-find-file
  (let ((warn (not buffer-read-only)))
    (when (and warn
               ;; No need to warn if buffer is auto-saved
               ;; under the name of the visited file.
               (not (and buffer-file-name
                         auto-save-visited-file-name))
               (file-newer-than-file-p (or buffer-auto-save-file-name
                                           (make-auto-save-file-name))
                                       buffer-file-name))
      (set (make-local-variable 'recover-this-file)
           (make-overlay (point-min) (point-max)))
      (overlay-put recover-this-file 'face 'recover-this-file))))
(add-hook 'find-file-hook 'recover-this-file-find-file-hook)
;; --[ Auto Save ]-----------------------------------------------------[ End ]--


;; --[ Compare File ]-----------------------------------------------------------
(message ">>>>> Loading [ Compare File Customization ] ....")
;; default to unified diffs
(setq diff-switches "-u")
;; compare text in current window with text in next window
;; use 'compare-windows function

;; run `diff' in compilation-mode
(autoload 'diff-mode "diff-mode" "Diff major mode" t)

;; use diff-mode- to enhance diff-mode
;;  ;; extensions to `diff-mode.el'
;;  (require 'diff-mode-)
;;
;;  ;; ediff, a comprehensive visual interface to diff & patch
;;  ;; setup for Ediff's menus and autoloads
;;  (require 'ediff-hook)
;;
;;  ;; auto-refine only the regions of this size (in bytes) or less
;;  (setq ediff-auto-refine-limit (* 2 14000))
;;
;; do everything in one frame
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-custom-diff-options "-u")
;;
;;  ;; split the window depending on the frame width
;;  (setq ediff-split-window-function (lambda (&optional arg)
;;                                      (if (> (frame-width) 160)
;;                                          (split-window-horizontally arg)
;;                                        (split-window-vertically arg))))
;; --[ Compare File ]--------------------------------------------------[ End ]--


;; --[ Buffer Handling ]--------------------------------------------------------
(message ">>>>> Loading [ Buffer Handling Customization ] ....")
(require 'uniquify)
;; if open a same name buffer, then forward to same name buffer
(setq uniquify-buffer-name-style 'post-forward)
;; use current buffer when read man
(setq Man-notify-method 'pushy)
;; better buffer switching
(iswitchb-mode 1)
(setq iswitchb-buffer-ignore '("^ " "*Buffer"))

;; Quickly switch between buffer with tab-complete
;; See to see "ido"
;;
;; Save where i was in each file
;; See saveplace
;; --[ Buffer Handling ]-----------------------------------------------[ End ]--


;; [ saveplace ]----------------------------------------------------------------
;; save where i was in each file
(message ">>>>> Loading [ saveplace ] Customization ....")
(require 'saveplace)
;; automatically save place in each file
(setq-default save-place t)
;; name of the file that records `save-place-alist' value
(setq save-place-file (concat  "~/.emacs.d/emacs.places"))
;; do not make backups of master save-place file
(setq save-place-version-control "never")
;; --------------------------------------------------------------------[ End ]--


;; --[ Window ]-----------------------------------------------------------------
;; use "C-c <--" back to previous window layout
(when section-windows (message ">>>>> Loading [ Windows Customization ] ....")
    (when (fboundp 'winner-mode)
      (winner-mode)
      (windmove-default-keybindings))
)
;; --------------------------------------------------------------------[ End ]--


;; --[ Frame Display ]----------------------------------------------------------
(when section-frames
    (load "frame-conf")
)
;; --[ Frame Display ]-------------------------------------------------[ End ]--


;; --[ Indentation ]------------------------------------------------------------
(when section-indentation
    (message ">>>>> Loading [ Indentation Customization ] ....")
    ;; Tab width
    (setq default-tab-width 4)
    ;; indentation can't insert tab
    (setq-default indent-tabs-mode nil)
    ;; a single space does end a sentence
    (setq sentence-end-double-space nil)
    ;; `C-M-\' runs the command `indent-region' (which does the job of
    ;; the imaginary command `unsuck-html-layout' in `html-mode')
    (defun indent-whole-buffer ()
      (interactive)
      (save-excursion
        (mark-whole-buffer)
        (indent-for-tab-command)))
)

;; --[ Indentation ]---------------------------------------------------[ End ]--


;; --[ Documentation ]----------------------------------------------------------
(message ">>>>> Loading [ Documentation Customization ] ....")
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
;; --[ Documentation ]-------------------------------------------------[ End ]--


;; --[ Compilation ]------------------------------------------------------------
(message ">>>>> Loading [ Compilation Customization ] ....")
;; highlight and parse the whole compilation output as soon as it arrives
(setq compile-auto-highlight t)
;; display compiler error message, check key bindings:
;; first-error / next-error / previous-error
;; --[ Compilation ]---------------------------------------------------[ End ]--


;; --[ Calendar ]---------------------------------------------------------------
(when section-calendar-diary
    (load "calendar-conf")
)
;; --[ Calendar ]------------------------------------------------------[ End ]--


;; --[ Printer ]----------------------------------------------------------------
(message ">>>>> Loading [ Printer Customization ] ....")
;; in case of press "print" of menu bar
(fset 'print-buffer 'ignore)
(setq lpr-command "")
(setq printer-name "")
;; --[ Printer ]-------------------------------------------------------[ End ]--


;; --[ Game ]-------------------------------------------------------------------
(message ">>>>> Loading [ Game ] Customizations ....")
;; get rid of the Games in the Tools menu
(define-key menu-bar-tools-menu [games] nil)
;; --[ Game ]----------------------------------------------------------[ End ]--


;; --[ Parentheses ]------------------------------------------------------------
(message ">>>>> Loading [ Parentheses ] Customizations ....")
;; show paren
(setq show-paren-mode t)
(setq show-paren-style 'parentheses)

;;auto pairing
(setq skeleton-pair t)
(setq skeleton-autowrap nil)
;; (setq skeleton-pair-alist  '(
;;     (?\(? _ ")")
;;     (?\[? _ "]")
;;     (?\{? _ "}")))
;; Auto complete parentheses
(global-set-key (kbd "(")   'skeleton-pair-insert-maybe)
(global-set-key (kbd "{")   'skeleton-pair-insert-maybe)
(global-set-key (kbd "\"")  'skeleton-pair-insert-maybe)
(global-set-key (kbd "[")   'skeleton-pair-insert-maybe)
(global-set-key (kbd "<")   'skeleton-pair-insert-maybe)
;; --[ Parentheses ]---------------------------------------------------[ End ]--


;; --[ Abbrevs ]----------------------------------------------------------------
(when section-abbrevs
    (message ">>>>> Loading [ Abbrevs ] Customizations ....")
    ;; abbrev
    (setq abbrev-file-name "~/.emacs.d/.abbrev_defs")
    (setq-default abbrev-mode t)
    (setq save-abbrevs nil)
)
;; --[ Abbrevs ]-------------------------------------------------------[ End ]--


;; --[ Font ]-------------------------------------------------------------------
(message ">>>>> Setting [ Font ] Customizations ....")
(require 'my-fontset-win)
(if mswin
  (huangq-fontset-courier 14))

;;  (set-default-font "clR8x14")
;;(set-default-font "-Misc-Fixed-Medium-R-Normal--12-100-75-75-C-60-ISO8859-1")
;;(set-default-font "Vera Sans Mono-14")
;;(set-default-font "-*-Monaco-normal-r-*-*-17-102-120-120-c-*-iso8859-1")
;;(set-default-font "Monospace-10")
;;(set-default-font "-adobe-courier-medium-r-normal--18-180-75-75-m-110-iso8859-1")
;; --[ Font ]----------------------------------------------------------[ End ]--


;; --[ Highlight Hex ]----------------------------------------------------------
(defvar hexcolor-keywords
    '(("#[ABCDEFabcdef[:digit:]]\\{6\\}"
        (0 (put-text-property (match-beginning 0)
                              (match-end 0)
                              'face (list :background
                                          (match-string-no-properties 0)))))))

(defun hexcolor-add-to-font-lock ()
    (interactive)
    (font-lock-add-keywords nil hexcolor-keywords))

(defun add-to-hooks (action &rest hooks)
    (mapc #'(lambda (x)
              (add-hook x action)) hooks))

(add-to-hooks 'hexcolor-add-to-font-lock
              'css-mode-hook
              'php-mode-hook
              'html-mode-hook
              'shell-script-mode
              'shell-mode-hook
              'emacs-lisp-mode-hook
              'text-mode-hook
              'haskell-mode-hook)

;; --[ Highlight Hex ]-------------------------------------------------[ End ]--


;; [ Emacs Server ]-------------------------------------------------------------
;;; EmacsClient
(when section-emacs-server
  (require 'server)
  (when (and (= emacs-major-version 23)
             (= emacs-minor-version 1)
             (equal window-system 'w32))
    (defun server-ensure-safe-dir (dir) "Noop" t)) ; Suppress error "directory
                                                   ; ~/.emacs.d/server is unsafe"
                                                   ; on windows.
  (server-start 1)
)
;; --------------------------------------------------------------------[ End ]--


;; [ TAG ]----------------------------------------------------------------------
(message ">>>>> Loading [ TAG ] Customizations ....")
;;; ctags -e -R *.cpp *.h
;;; M-. : find-tag ; M-* : jump back ;
;;; M-x tags-search : regexp-search
;;; M-, : resume 'tags-search'
;;; M-x tags-apropos : list all tags in a tag file that match a regexp
;;; M-x list-tags : list all tags defined in a source file
(setq path-to-ctags "/usr/bin/ctags")
;; set search dirs
(setq tags-table-list '("." ".." "../.."))
(defun my-create-tags (dir-name)
    "Create tags file."
    (interactive "DDirectory: ")
    (shell-command
      (format "%s -f %s/TAGS -e -R %s" path-to-ctags dir-name dir-name)
    )
)
(add-hook 'find-tag-hook 'ivan-etags-bookmark)
;; [ TAG ]-------------------------------------------------------------[ End ]--


;; [ ELPA ]---------------------------------------------------------------------
;;; This was installed by package-install.el.
;;; This provides support for the package system and
;;; interfacing with ELPA, the package archive.
;;; Move this code earlier if you want to reference
;;; packages in your .emacs.
(when
    (load
     (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))
;; --------------------------------------------------------------------[ End ]--


;; [ Doremi ]-------------------------------------------------------------------
(require 'doremi-frm)
;; --------------------------------------------------------------------[ End ]--


;; [ icicles ]------------------------------------------------------------------
;; (setq icicles-load-path (concat my-site-lisp-dir "icicles/"))
;; (add-to-list 'load-path icicles-load-path)
;; (load "icicles-conf")
;; --------------------------------------------------------------------[ End ]--

;; [ Dired ]--------------------------------------------------------------------
(when section-dired
    (load "dired-conf"))
;; [ Dired ]-----------------------------------------------------------[ End ]--


;; [ ibuffer ]------------------------------------------------------------------
;; buffer switch
(when section-ibuffer
  (load "ibuffer-conf"))
;; [ ibuffer ]---------------------------------------------------------[ End ]--


;; [ ido ]----------------------------------------------------------------------
;; start from Emacs 22
(message ">>>>> Loading [ ido ] Customizations ....")
(require 'ido nil t)
(when (featurep 'ido)
  (ido-mode 1)
  (setq ido-save-directory-list-file "~/.emacs.d/_ido_last")
  (setq ido-enable-flex-matching t)
)
;; [ ido ]-------------------------------------------------------------[ End ]--


;; [ template ]-----------------------------------------------------------------
;; (load "template-conf")
;; [ template ]--------------------------------------------------------[ End ]--


;; [ windmove ]-----------------------------------------------------------------
(message ">>>>> Loading [ windmove ] Customizations ....")
(require 'windmove) ;; default: Shift and arrow keys
(windmove-default-keybindings)
(when (featurep 'windmove)
  (global-set-key (kbd "S-<down>")  'windmove-down)
  (global-set-key (kbd "S-<up>")    'windmove-up)
  (global-set-key (kbd "S-<left>")  'windmove-left)
  (global-set-key (kbd "S-<right>") 'windmove-right)
  (windmove-default-keybindings)
)
;;  (windmove-default-keybindings 'meta)
;; [ windmove ]--------------------------------------------------------[ End ]--


;; [ Table ]--------------------------------------------------------------------
(message ">>>>> Loading [ table ] Customizations ....")
(require 'table)
(autoload 'table-insert "table" "WYGIWYS table editor")
(add-hook 'text-mode-hook 'table-recognize)
;; [ Table ]-----------------------------------------------------------[ End ]--


;; [ redo+ ]--------------------------------------------------------------------
(message ">>>>> Loading [ redo+ ] Customizations ....")
(require 'redo+)
;; [ redo+ ]-----------------------------------------------------------[ End ]--


;; [ htmlize ]------------------------------------------------------------------
(load "htmlize-conf")
;; [ htmlize ]---------------------------------------------------------[ End ]--


;; [ pager ]--------------------------------------------------------------------
(load "pager-conf")
;; [ pager ]-----------------------------------------------------------[ End ]--


;; [ browse-kill-ring ]---------------------------------------------------------
;; enhance kill ring function
(message ">>>>> Loading [ browse-kill-ring ] Customizations ....")
(require 'browse-kill-ring)
(require 'browse-kill-ring+)
;; string separating entries in the `separated' style
(setq browse-kill-ring-separator
      "\n--separator------------------------------")
;; temporarily highlight the inserted `kill-ring' entry
(setq browse-kill-ring-highlight-inserted-item t)
;; face in which to highlight the `browse-kill-ring-separator'
(defface separator-face '((t (:foreground "Blueviolet" :weight bold))) nil)
(setq browse-kill-ring-separator-face 'separator-face)
;; use `M-y' to invoke `browse-kill-ring'
(browse-kill-ring-default-keybindings)
(global-set-key (kbd "C-c k") 'browse-kill-ring)
;; [ browse-kill-ring ]------------------------------------------------[ End ]--


;; [ wb-line-number ]-----------------------------------------------------------
;; display line number at left window
;;  (autoload 'wb-line-number-toggle "wb-line-number" nil t)
;; [ wb-line-number ]--------------------------------------------------[ End ]--


;; [ remember ]-----------------------------------------------------------------
(message ">>>>> Loading [ remember ] Customizations ....")
(require 'remember)
(org-remember-insinuate)
(global-set-key (kbd "C-x M-r") 'remember)
;; [ remember ]--------------------------------------------------------[ End ]--


;; [ multi-term ]---------------------------------------------------------------
;; available for Emacs 23
;; (message ">>>>> Loading [ multi-term ] Customizations ....")
;; (load "multi-term-conf")
;; [ multi-term ]------------------------------------------------------[ End ]--


;; [ hide-lines ]---------------------------------------------------------------
(message ">>>>> Loading [ hide-lines ] Customizations ....")
(require 'hide-lines)
;; [ hide-lines ]------------------------------------------------------[ End ]--


;; [ Version Control ]----------------------------------------------------------

;; *** --- PCL-CVS
(when section-pcvs
  (when (try-require 'pcvs)
    (eval-after-load 'pcvs
      (load "pcvs-conf"))
))

;; *** --- Subversion
(when section-psvn
  (when (try-require 'psvn)
    (eval-after-load 'psvn
      (load "psvn-conf"))
))

;; *** --- Change Log
;; don't make a new entry, when the last entry was made by you and on the same date
(setq add-log-always-start-new-record nil)
;; adds the file's version number to the change log entry
(setq change-log-version-info-enabled t)

;; [ Version Control ]-------------------------------------------------[ End ]--


;; [ smart-compile ]------------------------------------------------------------
(load "smart-compile-conf")
;; [ smart-compile ]---------------------------------------------------[ End ]--


;; [ highlight-parentheses ]----------------------------------------------------
(message ">>>>> Loading [ highlight-parentheses ] Customizations ....")
(require 'highlight-parentheses)
(setq hl-paren-colors '("red" "yellow" "cyan" "magenta" "green" "red"))
(dolist (hook (list 'hs-hide-hook
                    'Man-mode-hook
                    'gdb-mode-hook
                    'Info-mode-hook
                    'find-file-hook
                    'help-mode-hook
                    'dired-mode-hook
                    'custom-mode-hook
                    'apropos-mode-hook
                    'log-view-mode-hook
                    'compilation-mode-hook
                    'svn-log-edit-mode-hook
                    'package-menu-mode-hook
                    'inferior-ruby-mode-hook
                    'completion-list-mode-hook
                    'lisp-interaction-mode-hook
                    'browse-kill-ring-mode-hook
              )
        )
  (add-hook hook
            (lambda()
              (highlight-parentheses-mode t)) t)
)
;; [ highlight-parentheses ]-------------------------------------------[ End ]--


;; [ highlight-symbol ]---------------------------------------------------------
(message ">>>>> Loading [ highlight-symbol ] Customizations ....")
(require 'highlight-symbol)
(highlight-symbol-mode 1)
(global-set-key [C-f3]    'highlight-symbol-at-point)
(global-set-key [M-f3]    'highlight-symbol-next)
(global-set-key [C-M-f3]  'highlight-symbol-prev)
;;(global-set-key [(shift f3)]    'highlight-symbol-prev)
;; [ highlight-symbol ]------------------------------------------------[ End ]--


;; [ auto insert ]--------------------------------------------------------------
(load "autoinsert-conf")
;; [ auto insert ]-----------------------------------------------------[ End ]--


;; [ auto-install ]-------------------------------------------------------------
(load "auto-install-conf")
;; [ auto-install ]----------------------------------------------------[ End ]--


;; [ header2 ]------------------------------------------------------------------
(load "header2-conf")
;; [ header2 ]---------------------------------------------------------[ End ]--


;; [ goto change ]--------------------------------------------------------------
(message ">>>>> Loading [ goto-change ] Customizations ....")
(require 'goto-chg)
;; [ goto change ]-----------------------------------------------------[ End ]--


;; [ dabbrev-expand-multiple ]--------------------------------------------------
(message ">>>>> Loading [ dabbrev-expand-multiple ] Customizations ....")
(require 'dabbrev-expand-multiple)
(global-set-key "\M-/" 'dabbrev-expand-multiple)
;; [ dabbrev-expand-multiple ]-----------------------------------------[ End ]--


;; [ column-marker ]------------------------------------------------------------
;; highlight columns 75, 80, 100 in some modes
(load "column-marker-conf")
;; [ column-marker ]---------------------------------------------------[ End ]--


;; [ recent files ]-------------------------------------------------------------
(message ">>>>> Loading [ recentf ] Customizations ....")
;; recentf is a minor mode that builds a list of recently opened files
;; this list is automatically saved across Emacs sessions
(require 'recentf)
;; toggle `recentf' mode
(recentf-mode 1)
;; file to save the recent list into
(setq recentf-save-file "~/.emacs.d/.recentf")
;; maximum number of items in the recentf menu
(setq recentf-max-menu-items 30)
;; to protect from TRAMP -- FIXME not correctly supported (yet) under Win32
(setq recentf-auto-cleanup 'never)
;; save file names relative to my current home directory
(setq recentf-filename-handlers '(abbreviate-file-name))
;; add key binding
(global-set-key (kbd "C-x C-r") 'recentf-open-files)
;; [ recent files ]---------------------------------------------------[ End ]---


;; [ anything ]-----------------------------------------------------------------
;; available for Emacs 22/23
(load "anything-conf")
;; [ anything ]--------------------------------------------------------[ End ]--


;; [ auto-complete ]------------------------------------------------------------
;; available for Emacs 22/23
(when section-ac
    (setq auto-comp-load-path (concat my-site-lisp-dir "auto-complete/"))
    (add-to-list 'load-path auto-comp-load-path)
    (load "auto-complete-conf")
)
;; [ auto-complete ]---------------------------------------------------[ End ]--

;; [ yasnippet ]----------------------------------------------------------------
;; available for Emacs 22/23
(when section-yasnippet
    (setq yasnippet-load-path (concat my-site-lisp-dir "yasnippet/"))
    (add-to-list 'load-path yasnippet-load-path)
    (load "yasnippet-conf")
)
;; [ yasnippet ]-------------------------------------------------------[ End ]--

;; [ ffap ]---------------------------------------------------------------------
;; find file or URL at point
(load "ffap-conf")
;; [ ffap ]------------------------------------------------------------[ End ]--


;; [ EMMS ]---------------------------------------------------------------------
(when section-emms
  (setq emms-load-path (concat my-site-lisp-dir "emms/"))
  (add-to-list 'load-path emms-load-path)
  (load "emms-conf")
)
;; [ EMMS ]------------------------------------------------------------[ End ]--


;; [ VM ]-----------------------------------------------------------------------
(when section-vm
  (setq vm-load-path (concat my-site-lisp-dir "vm/"))
  (add-to-list 'load-path vm-load-path)
  (load "vm-conf")
)
;; [ VM ]--------------------------------------------------------------[ End ]--


;; [ Hide-Show ]----------------------------------------------------------------
(message ">>>>> Loading [ hide-show ] Customizations ....")
(require 'hideshow nil t)
(when (featurep 'hideshow)
  (dolist (hook '(c++-mode-hook
                  c-mode-hook
                  emacs-lisp-mode-hook
                  verilog-mode-hook
                  python-mode-hook
                  cperl-mode-hook))
  (add-hook hook 'hs-minor-mode))
)
;; [ Hide-Show ]-------------------------------------------------------[ End ]--


;; [ hippie-exp ]---------------------------------------------------------------
;; expand text trying various ways to find its expansion
(when (try-require 'hippie-exp)
    (load "hippie-exp-conf")
)

;; (global-set-key (kbd "M-/") 'hippie-expand)

;; I recommend you split the key binding of those two command.
;; I binding TAB yas/expand, and binding M-/ hippie-expand.
;; So yas/expand don't conflict with hippie/expand.

;; [ hippie-exp ]------------------------------------------------------[ End ]--


;; [ pabbrev ]------------------------------------------------------------------
(message ">>>>> Loading [ pabbrev ] Customizations ....")
(when (try-require 'pabbrev)
  ;; don't print messages while scavenging on idle timer
  (setq pabbrev-idle-timer-verbose nil)
  ;; tab completion with continual, as-you-type feedback
  (global-pabbrev-mode)
)
;; [ pabbrev ]---------------------------------------------------------[ End ]--


;; [ auto-header ]-------------------------------------------------------------
(when (try-require 'auto-header)
    (load "auto-header-conf")
)
;; [ auto-header ]----------------------------------------------------[ End ]--


;; [ Email ]--------------------------------------------------------------------
;;  (require 'email)
;;  (setq send-mail-function 'email-send)
;; --------------------------------------------------------------------[ End ]--


;; [ frame-cmds ]---------------------------------------------------------------
;;  (require 'frame-cmds)
;; --------------------------------------------------------------------[ End ]--


;; [ zoom-frm ]-----------------------------------------------------------------
;;  (require 'zoom-frm)
;;  (global-set-key (if (boundp 'mouse-wheel-down-event) ; Emacs 22+
;;                      (vector (list 'control mouse-wheel-down-event))
;;                    [C-mouse-wheel])    ; Emacs 20, 21
;;                  'zoom-in
;;  )
;;  (when (boundp 'mouse-wheel-up-event) ; Emacs 22+
;;    (global-set-key (vector (list 'control mouse-wheel-up-event))
;;          'zoom-out
;;    )
;;  )
;;  (global-set-key [S-mouse-1]    'zoom-in)
;;  (global-set-key [C-S-mouse-1]  'zoom-out)
;;  ;; Get rid of `mouse-set-font' or `mouse-appearance-menu':
;;  (global-set-key [S-down-mouse-1] nil)
;; --------------------------------------------------------------------[ End ]--


;; [ org ]----------------------------------------------------------------------
(when section-org
  (load "org-conf"))
;; [ org ]-------------------------------------------------------------[ End ]--


;; [ etask ]--------------------------------------------------------------------
(setq etask-load-path (concat my-site-lisp-dir "etask/"))
(add-to-list 'load-path etask-load-path)
(when section-etask
    (load "etask-conf"))
;; [ etask ]-----------------------------------------------------------[ End ]--


;; [ selftest ]-----------------------------------------------------------------
;; (load "self-test-conf")
;; --------------------------------------------------------------------[ End ]--


;; [ ledger ]--------------------------------------------------------------------
;; (when (locate-library "ledger")
;;   (message ">>>>> Loading [ ledger ] Customizations ....")
;;   (autoload 'ledger-mode "ledger" nil t))
;; --------------------------------------------------------------------[ End ]--


;; [ vi ]------------------------------------------------------------------------
(when section-vi
;;  (load "viper-conf")
;;  (require 'vimpulse)
)
;; --------------------------------------------------------------------[ End ]--


;; [ eshell ]-------------------------------------------------------------------
(when section-eshell
    (load "eshell-conf")
)
;; --------------------------------------------------------------------[ End ]--


;; [ erc ]-----------------------------------------------------------------------
;; (load "erc-conf")
;; --------------------------------------------------------------------[ End ]--


;; [ planner ]-------------------------------------------------------------------
(setq planner-load-path (concat my-site-lisp-dir "planner/"))
(add-to-list 'load-path planner-load-path)
;; (when section-planner (message ">>>>> Loading [ Planner ] Customizations ....")
;; (load "planner-conf")
;; )
;; --------------------------------------------------------------------[ End ]--


;; [ longlines ]-----------------------------------------------------------------
(message ">>>>> Loading [ longlines ] Customizations ....")
(when (load "longlines" t)
  (setq longlines-show-hard-newlines t)
  (add-to-list 'auto-mode-alist '("\\.ll\\'" . longlines-mode)))
;; --------------------------------------------------------------------[ End ]--


;; [ tramp ]---------------------------------------------------------------------
;;  (load "tramp-conf")
;; --------------------------------------------------------------------[ End ]--


;; [ rot13 ]---------------------------------------------------------------------
;; perform Caesar ciphers
(when (try-require 'rot13)
    (load "rot13-conf")
)
;; --------------------------------------------------------------------[ End ]--


;; [ doc-view ]-----------------------------------------------------------------
(when section-document-view
  (if is-after-emacs-23
    (load "doc-view-conf"))
)
;; --------------------------------------------------------------------[ End ]--


;; [ artist ]-------------------------------------------------------------------
(when section-artist
  (require 'artist-conf)
)
;; --------------------------------------------------------------------[ End ]--


;; [ muse ]---------------------------------------------------------------------
(setq muse-load-path (concat my-site-lisp-dir "muse/lisp/"))
(add-to-list 'load-path muse-load-path)
(when section-muse
    (load "muse-conf")
)
;; --------------------------------------------------------------------[ End ]--


;; [ Choosing Mode ]------------------------------------------------------------
;; use right mode for specified file
(setq auto-mode-alist
      (append
       '(
         ("\\.txt\\'"                     . text-mode)
         ("\\.doc\\'"                     . text-mode)
         ("\\.c\\'"                       . c-mode)
         ("\\.C\\'"                       . c++-mode)
         ("\\.cpp\\'"                     . c++-mode)
         ("\\.h\\'"                       . c++-mode)
         ("\\.java\\'"                    . java-mode)
         ("\\.sh\\'"                      . shell-script-mode)
         ("\\.csh\\'"                     . shell-script-mode)
         ("\\.zsh\\'"                     . shell-script-mode)
         ("\\rc\\'"                       . shell-script-mode)
         ("\\.pl\\'"                      . cperl-mode)
         ("\\.perl\\'"                    . cperl-mode)
         ("\\.el\\'"                      . emacs-lisp-mode)
         ("\\.tex\\'"                     . latex-mode)
         ("mutt-"                         . mail-mode)
         ("makefile"                      . makefile-mode)
         ("Makefile"                      . makefile-mode)
         ("\\.html\\'"                    . html-mode)
         ("\\.htm\\'"                     . html-mode)
         ("\\.bin\\'"                     . hexl-mode)
         ("\\.py\\'"                      . python-mode)
         (".ssh/config\\'"                . ssh-config-mode)
         ("sshd?_config\\'"               . ssh-config-mode)
       )
       auto-mode-alist
     )
)


;; [ Auto-Fill ]----------------------------------------------------------------
(message ">>>>> Loading [ Auto-Fill Mode ] Customizations ....")
(auto-fill-mode 1)
(setq default-justification 'full)
(setq adaptive-fill-mode nil)
(setq default-fill-column 80)
;; --------------------------------------------------------------------[ End ]--


;; [ CSV Mode ]-----------------------------------------------------------------
(message ">>>>> Loading [ CSV Mode ] Customizations ....")
;; major mode for editing comma-separated value files
(require 'csv-mode nil t)
;; field separators: a list of *single-character* strings
(setq csv-separators '("," ";"))
;; --------------------------------------------------------------------[ End ]--


;; [ Text Mode ]----------------------------------------------------------------
(message ">>>>> Loading [ Text Mode ] Customizations ....")
;; default mode is Text Mode
(setq default-major-mode 'text-mode)
(defun my-textmode-startup ()
  (interactive)
;;  (filladapt-mode t)
;;  (flyspell-mode t)
  (setq tab-width 4)
)
(add-hook 'text-mode-hook 'my-textmode-startup)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
;; --------------------------------------------------------------------[ End ]--


;; [ Debug Mode ]---------------------------------------------------------------
;;  (define-key debugger-mode-map "o" 'other-window)
;; --------------------------------------------------------------------[ End ]--


;; [ Occur Mode ]---------------------------------------------------------------
(add-hook 'occur-mode-hook (lambda () (setq truncate-lines t)))
;; [ Occur Mode ]------------------------------------------------------[ End ]--


;; [ View Mode ]----------------------------------------------------------------
(message ">>>>> Loading [ View Mode ] Customizations ....")
;; vim style
(setq view-mode-hook
  (lambda ()
    (define-key view-mode-map "h" 'backward-char)
    (define-key view-mode-map "l" 'forward-char)
    (define-key view-mode-map "j" 'next-line)
    (define-key view-mode-map "k" 'previous-line)
  )
)
;; --------------------------------------------------------------------[ End ]--


;; [ Verilog Mode ]-------------------------------------------------------------
(setq verilog-load-path (concat my-site-lisp-dir "verilog/"))
(add-to-list 'load-path verilog-load-path)
(when section-verilog
    (load "verilog-conf")
)
;; --------------------------------------------------------------------[ End ]--

;; [ Vlog Mode ]----------------------------------------------------------------
(setq section-vlog nil)
(setq vlog-load-path (concat my-site-lisp-dir "vlog-mode/"))
(add-to-list 'load-path vlog-load-path)
(when section-vlog
    (load "vlog-conf")
)
;; --------------------------------------------------------------------[ End ]--

(require 'auto-complete-verilog)

;; [ Python Mode ]--------------------------------------------------------------
(setq python-load-path (concat my-site-lisp-dir "python/"))
(add-to-list 'load-path python-load-path)
(when section-python
    (load "python-conf")
)
;; --------------------------------------------------------------------[ End ]--


;; [ Perl Mode ]----------------------------------------------------------------
;; cperl-mode is preferred to perl-mode,
;; replace the standard perl-mode with cperl-mode
(setq perl-load-path (concat my-site-lisp-dir "cperl/"))
(add-to-list 'load-path perl-load-path)
(when section-perl
    (load "cperl-conf")
)
;; --------------------------------------------------------------------[ End ]--


;; [ Shell Mode ]---------------------------------------------------------------
;; set shell type
(when section-shell-mode
    (load "shell-mode-conf"))
;; --------------------------------------------------------------------[ End ]--


;; [ Shell script Mode ]--------------------------------------------------------
(message ">>>>> Loading [ Shell Scripting Mode ] Customizations ....")
(defun my-shellscript-startup ()
  "Setup shell script mode."
  (interactive)
)
(add-hook 'sh-mode-hook 'my-shellscript-startup)
;; --------------------------------------------------------------------[ End ]--


;; [ Makefile Mode ]------------------------------------------------------------
(message ">>>>> Loading [ Makefile Mode ] Customizations ....")
(defun my-makefile-startup ()
  "Setup how I like editing makefiles."
  (interactive)
;;    (start-programing-mode)
;;    (local-set-key "\C-css" 'insert-script-seperator-line)
;;    (local-set-key "\C-csh" 'insert-script-section-header)
;;    (local-set-key "\C-csb" 'insert-script-big-header)
)
(add-hook 'makefile-mode-hook 'my-makefile-startup)
;; --------------------------------------------------------------------[ End ]--


;; [ C Mode ]-------------------------------------------------------------------
(when section-c-mode
    (load "c-mode-conf"))
;; --------------------------------------------------------------------[ End ]--


;; [ Emacs Lisp Mode ]----------------------------------------------------------
(when section-elisp-mode
    (load "elisp-mode-conf"))
;; --------------------------------------------------------------------[ End ]--


;; [ Comint Mode ]--------------------------------------------------------------
(message ">>>>> Loading [ Comint Mode ] Customizations ....")
(setq comint-input-ignoredups t)
(setq comint-input-ring-size 64)
(add-hook 'comint-mode-hook
          '(lambda ()
             (setq comint-scroll-show-maximum-output t)))
;; --------------------------------------------------------------------[ End ]--


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; ==== Chinese setting ====
(when section-chinese
    (load "utf8-conf"))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; ==== Define Function ====
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(message ">>>>> Loading [ Function Defination ] ....")





;;;; Function Set for Edit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(autoload 'word-at-point "thingatpt" nil t)
(defun replace-word-at-point (from to)
  "Replace word at point."
  (interactive (let ((from (word-at-point)))
     (list from (query-replace-read-to from "Replace" nil))))
  (query-replace from to))

;; delete all the trailing whitespaces and tabs across the current buffer
(defun my-delete-trailing-whitespaces-and-untabify ()
  "Delete all the trailing white spaces, and convert all tabs to multiple
spaces across the current buffer."
  (interactive "*")
  (delete-trailing-whitespace)
  (untabify (point-min) (point-max)))
;; (global-set-key (kbd "C-c t") 'my-delete-trailing-whitespaces-and-untabify)


;;;; Function Set for Move
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; === go to char ===
;;;###autoload
(defun my-go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
Typing `my-go-to-char-key' again will move forwad to the next Nth
occurence of CHAR."
  (interactive "p\ncGo to Char:")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char)
                     char)
    (search-forward (string char) nil nil n))
  (setq unread-command-events (list last-input-event))
)

;;; === get column number ===
(defun my-get-col ()
  "Return column number of point."
  (interactive)
  (save-excursion
    (let ( (opoint (point)) (ncol) )
      (beginning-of-line)
          (setq ncol (- opoint (point)))
;;          (message "col = %s" ncol)
          ncol
    )
  )
)

;; go to last edit position
(defun my-goto-last-edit-pos ()
  "Go to the last position where editing occurred."
  (interactive)
  (let ((undos buffer-undo-list))
    (when (listp undos)
      (while
        (and undos
          (let
            ((pos (or (cdr-safe (car undos)) (car undos))))
            (not (and (integerp pos) (goto-char (abs pos))))
          )
        )
        (setq undos (cdr undos))
      )
    )
  )
)

;;; === Goto column n ===
(defun my-goto-column (n)
  "Goto column ARG, counting from column 0. Argument N is column number."
  (interactive "Goto Column: ")
  (move-to-column n)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; ==== Gloabal Key Binding ====
(load "bindings")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when section-debugging
  (if missing-packages-list
    (progn
      (message "*** ------->>> W A R N I N G <<<-------")
      (message "*** Packages not found: %S" missing-packages-list)
      (message "*** -----------------------------------"))
))


;; [ session ]-------------------------------------------------------------------
;; session
(when section-saving-emacs-sessions
    (message ">>>>> Loading [ session ] Customizations ....")
    (require 'session)
    (setq session-save-file "~/.emacs.d/.session")
    (add-hook 'after-init-hook 'session-initialize)
)
;; --------------------------------------------------------------------[ End ]--


;; [ desktop ]------------------------------------------------------------------
(message ">>>>> Loading [ desktop ] Customizations ....")
(require 'wcy-desktop)
(wcy-desktop-init)
(add-hook 'emacs-startup-hook
          (lambda ()
            (ignore-errors
              (wcy-desktop-open-last-opened-files))))

;; (load "desktop-conf")
;; --------------------------------------------------------------------[ End ]--


(message "***** >>>>> [ Loading my Emacs Init File Finished ] <<<<< *****")
